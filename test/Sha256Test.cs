/*
     Copyright 2014-2025 Sedat Kapanoglu

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
using System;
using NUnit.Framework;
using SimpleBase;

namespace SimpleBaseTest;

[TestFixture]
class Sha256Test
{
    // Test data generated by running ComputeDigestTwice on known inputs
    // to ensure the function maintains the same behavior in the future
    static readonly object[][] computeDigestTwiceTestData =
    [
        [new byte[] { 0x01, 0x02, 0x03, 0x04 }, new byte[] { 0x8D, 0xE4, 0x72, 0xE2 }],
        [new byte[] { 0xAA, 0xBB, 0xCC, 0xDD }, new byte[] { 0x6A, 0x83, 0xC7, 0xF1 }],
        [new byte[] { 0xFF, 0x00, 0xFF, 0x00 }, new byte[] { 0xFB, 0xB6, 0xBE, 0xAE }],
        [new byte[] { 0x12, 0x34, 0x56, 0x78, 0x9A }, new byte[] { 0x8A, 0x0C, 0x06, 0x0F }],
        [new byte[] { 0x00, 0x11, 0x22, 0x33, 0x44 }, new byte[] { 0x1D, 0x05, 0x49, 0x7B }],
        [new byte[] { 0xDE, 0xAD, 0xBE, 0xEF, 0xCA }, new byte[] { 0x75, 0x8A, 0x20, 0x49 }],
    ];

    [Test]
    [TestCaseSource(nameof(computeDigestTwiceTestData))]
    public void ComputeDigestTwice_KnownInputs_ReturnsExpectedDigest(byte[] input, byte[] expectedDigest)
    {
        Span<byte> actualDigest = stackalloc byte[4];
        Sha256.ComputeDigestTwice(input, actualDigest);
        Assert.That(actualDigest.ToArray(), Is.EqualTo(expectedDigest));
    }

    [Test]
    public void ComputeDigestTwice_EmptyInput_ReturnsExpectedDigest()
    {
        var emptyInput = new byte[] { };
        var expectedDigest = new byte[] { 0x5D, 0xF6, 0xE0, 0xE2 };
        Span<byte> actualDigest = stackalloc byte[4];
        Sha256.ComputeDigestTwice(emptyInput, actualDigest);
        Assert.That(actualDigest.ToArray(), Is.EqualTo(expectedDigest));
    }

    [Test]
    public void ComputeDigestTwice_InvalidOutputLength_ThrowsArgumentException()
    {
        var input = new byte[] { 0x01, 0x02, 0x03, 0x04 };
        
        // Test with output buffer that's too short
        Assert.Throws<ArgumentException>(() =>
        {
            Span<byte> shortOutput = stackalloc byte[3];
            Sha256.ComputeDigestTwice(input, shortOutput);
        });
        
        // Test with output buffer that's too long
        Assert.Throws<ArgumentException>(() =>
        {
            Span<byte> longOutput = stackalloc byte[5];
            Sha256.ComputeDigestTwice(input, longOutput);
        });
    }

    [Test]
    public void ComputeDigestTwice_RepeatedCalls_ReturnsSameResult()
    {
        var input = new byte[] { 0x01, 0x02, 0x03, 0x04 };
        Span<byte> digest1 = stackalloc byte[4];
        Span<byte> digest2 = stackalloc byte[4];
        
        Sha256.ComputeDigestTwice(input, digest1);
        Sha256.ComputeDigestTwice(input, digest2);
        
        Assert.That(digest1.ToArray(), Is.EqualTo(digest2.ToArray()));
    }
}