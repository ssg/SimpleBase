SimpleBase.Base32.TryDecodeUInt64(string! text, out ulong number) -> bool
SimpleBase.Base62
SimpleBase.Base62.Base62(SimpleBase.Base62Alphabet! alphabet) -> void
SimpleBase.Base62Alphabet
SimpleBase.Base62Alphabet.Base62Alphabet(string! alphabet) -> void
SimpleBase.Base85Ipv6.TryDecodeIpv6(string! text, out System.Net.IPAddress! ip) -> bool
SimpleBase.DividingCoder<TAlphabet>
SimpleBase.DividingCoder<TAlphabet>.Alphabet.get -> TAlphabet!
SimpleBase.DividingCoder<TAlphabet>.Decode(System.ReadOnlySpan<char> text) -> byte[]!
SimpleBase.DividingCoder<TAlphabet>.DividingCoder(TAlphabet! alphabet, int divisor, int reductionFactor) -> void
SimpleBase.DividingCoder<TAlphabet>.Encode(System.ReadOnlySpan<byte> bytes) -> string!
SimpleBase.DividingCoder<TAlphabet>.TryDecode(System.ReadOnlySpan<char> input, System.Span<byte> output, out int numBytesWritten) -> bool
SimpleBase.DividingCoder<TAlphabet>.TryEncode(System.ReadOnlySpan<byte> input, System.Span<char> output, out int numCharsWritten) -> bool
SimpleBase.INumericBaseCoder.TryDecodeUInt64(string! text, out ulong number) -> bool
static SimpleBase.Base62.Default.get -> SimpleBase.Base62!
static SimpleBase.Base62.LowerFirst.get -> SimpleBase.Base62!
static SimpleBase.Base62Alphabet.Alternative.get -> SimpleBase.Base62Alphabet!
static SimpleBase.Base62Alphabet.Standard.get -> SimpleBase.Base62Alphabet!
virtual SimpleBase.DividingCoder<TAlphabet>.GetSafeByteCountForDecoding(System.ReadOnlySpan<char> text) -> int
virtual SimpleBase.DividingCoder<TAlphabet>.GetSafeCharCountForEncoding(System.ReadOnlySpan<byte> bytes) -> int